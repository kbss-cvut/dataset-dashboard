
package cz.cvut.kbss.ddo.model;

import java.util.Map;
import java.util.Set;
import cz.cvut.kbss.ddo.Vocabulary;
import cz.cvut.kbss.jopa.CommonVocabulary;
import cz.cvut.kbss.jopa.model.annotations.Id;
import cz.cvut.kbss.jopa.model.annotations.OWLAnnotationProperty;
import cz.cvut.kbss.jopa.model.annotations.OWLClass;
import cz.cvut.kbss.jopa.model.annotations.OWLObjectProperty;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraint;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraints;
import cz.cvut.kbss.jopa.model.annotations.Properties;
import cz.cvut.kbss.jopa.model.annotations.Types;


/**
 * This class was generated by the OWL2Java tool version $VERSION$
 * 
 */
@OWLClass(iri = Vocabulary.s_c_dataset_publication)
public class dataset_publication
    extends Thing
{

    @OWLObjectProperty(iri = Vocabulary.s_p_has_source)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_dataset_source, min = 1, max = 1)
    })
    protected Set<Thing> has_source;
    @OWLObjectProperty(iri = Vocabulary.s_p_has_publisher)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_publisher, min = 1, max = 1)
    })
    protected Set<Thing> has_publisher;
    @OWLObjectProperty(iri = Vocabulary.s_p_has_published_dataset_snapshot)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_dataset_snapshot, min = 1, max = 1)
    })
    protected dataset_snapshot has_published_dataset_snapshot;

    public void setHas_source(Set<Thing> has_source) {
        this.has_source = has_source;
    }

    public Set<Thing> getHas_source() {
        return has_source;
    }

    public void setHas_publisher(Set<Thing> has_publisher) {
        this.has_publisher = has_publisher;
    }

    public Set<Thing> getHas_publisher() {
        return has_publisher;
    }

    public void setHas_published_dataset_snapshot(dataset_snapshot has_published_dataset_snapshot) {
        this.has_published_dataset_snapshot = has_published_dataset_snapshot;
    }

    public dataset_snapshot getHas_published_dataset_snapshot() {
        return has_published_dataset_snapshot;
    }

}
